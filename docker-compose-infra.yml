# docker-compose.yml

version: '3'
services:
  db:
    image: postgres:15
    ports:
      - '5432:5432'
    volumes:
      - ./migrations/base:/docker-entrypoint-initdb.d/
    shm_size: 1g
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432

  multitenant_db:
    image: postgres:15
    ports:
      - '5433:5432'
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  pg_bouncer:
    image: bitnami/pgbouncer:latest
    ports:
      - '6453:6432'
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_HOST: db
      POSTGRESQL_PASSWORD: postgres
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_IGNORE_STARTUP_PARAMETERS: "extra_float_digits, options"
      PGBOUNCER_STATS_USERS: postgres
      PGBOUNCER_DEFAULT_POOL_SIZE: 50
      PGBOUNCER_MAX_CLIENT_CONN: 2000
    ulimits:
      nofile:
        soft: 655360
        hard: 655360
    depends_on:
      - db

  pg_bouncer_exporter:
    image: spreaker/prometheus-pgbouncer-exporter
    environment:
      PGBOUNCER_EXPORTER_HOST: 0.0.0.0
      PGBOUNCER_EXPORTER_PORT: 9127
      PGBOUNCER_HOST: pg_bouncer
      PGBOUNCER_PORT: 6432
      PGBOUNCER_USER: postgres
      PGBOUNCER_PASS: postgres
    depends_on:
      - pg_bouncer
    ports:
      - 9127:9127

  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'

  minio:
    image: minio/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: supa-storage
      MINIO_ROOT_PASSWORD: secret1234
    command: server --console-address ":9001" /data

  create_default_bucket:
    image: minio/mc
    depends_on:
      - minio
    environment:
      BUCKET_NAME: ${GLOBAL_S3_BUCKET:-local-bucket}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set supa-minio http://minio:9000 supa-storage secret1234;
      /usr/bin/mc mb "supa-minio/$${BUCKET_NAME}";
      exit 0;
      "

  imgproxy:
    image: darthsim/imgproxy
    ports:
      - '50020:8080'
    volumes:
      - ./data:/images/data
    environment:
      - IMGPROXY_WRITE_TIMEOUT=20
      - IMGPROXY_READ_TIMEOUT=20
      - IMGPROXY_REQUESTS_QUEUE_SIZE=24
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/images
      - IMGPROXY_USE_ETAG=true
      - IMGPROXY_ENABLE_WEBP_DETECTION=true

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./dashboard/prometheus:/etc/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./dashboard/grafana/config:/etc/grafana/provisioning
      - ./dashboard/grafana/dashboards:/var/lib/grafana/dashboards
